"""
This module is used to push the list's content into database. After that, it clears out the spam records from list.
"""
import server
import ShivaConfig
import logging
import MySQLdb as mdb
import datetime


def push():
  logging.info("[+]Inside ShivaPushToDb Module")
  exeSql = ShivaConfig.dbConnect()
  for record in server.QueueReceiver.records:
    logging.info("Records are %d" % len(server.QueueReceiver.records))
    
    try:
      insertSpam = "INSERT INTO `spam`(`id`, `ssdeep`, `to`, `from`, `textMessage`, `htmlMessage`, `subject`, `headers`, `sourceIP`, `sensorID`, `firstSeen`, `relayCounter`, `totalCounter`, `length`, `relayTime`) VALUES ('" + str(record['spamMd5']) + "', '" + str(record['spam_id']) + "', '" + str(record['to']) + "', '" + str(record['from']) + "', '" + str(record['text']) + "', '" + str(record['html']) + "', '" + str(record['subject']) + "', '" + str(record['headers']) + "', '" + str(record['sourceIP']) + "', '" + str(record['sensorID']) + "', '" + str(record['firstSeen']) + "', '" + str(record['relayed']) + "', '" + str(record['counter']) + "', '" + str(record['len']) + "', '" + str(record['firstRelayed'])  + "')"
  
    except Exception, e:
      logging.info(e)
    logging.info("Query is %s" % insertSpam)
  
    try:
      logging.info("[+]ShivaPushToDb Module: Trying to push our new record in database")
      exeSql.execute(insertSpam)
    
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaPushToDb insert_spam) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaPushToDb - insertSpam) %s %s \n" % (key, e))
      return None
      
      # Checking for attachments and dumping into directory, if any. Also storing information in database.
    if len(record['attachmentFile']) > 0:
      i = 0
      while i < len(record['attachmentFile']):
	logging.info("[+]ShivaPushToDb Module: Attachment found. Trying to dump it in local directory.")
	fileName = str(record['spamMd5']) + "-a-" + str(record['attachmentFileName'][i])
	path = '/home/template/dumps/attachments/' + fileName 
	attachFile = open(path, 'wb')
	attachFile.write(record['attachmentFile'][i])
	attachFile.close()
	logging.info("[+]ShivaPushToDb Module: Attachment dumped with name %s" % fileName)
	record['attachmentFile'][i] = path
      
	insertAttachment = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Attachment' + "', '" + str(record['attachmentFileMd5'][i]) + "', '" + str(record['date']) + "')"
      
	try:
	  logging.info("Trying to save attachment's info in database.")
	  exeSql.execute(insertAttachment)
	  i += 1
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaPushToDb insert_attachment) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaPushToDb - insertAttachment) %s %s \n" % (key, e))
	  return None
	  
    # Checking for inline attachment files
    if len(record['inlineFile']) > 0:
      i = 0
      while i < len(record['inlineFile']):
	logging.info("[+]ShivaPushToDb Module: Inline attachment found. Trying to dump it in local directory.")
	fileName = str(record['spamMd5']) + "-i-" + str(record['inlineFileName'][i])
	path = '/home/template/dumps/inlines/' + fileName 
	attachFile = open(path, 'wb')
	attachFile.write(record['inlineFile'][i])
	attachFile.close()
	logging.info("[+]ShivaPushToDb Module: Inline attachment dumped in local directory with file name %s." % fileName)
	insertInline = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Inline' + "', '" + str(record['inlineFileMd5'][i]) + "', '" + str(record['date']) + "')"
      
	try:
	  logging.info("Try to save inline attachment's info in database.")
	  exeSql.execute(insertInline)
	  i += 1
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaPushToDb insert_inline) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaPushToDb - insertInline) %s %s \n" % (key, e))
	  return None
	  
    # Checking for links in spams and storing them
    if len(record['links']) > 0:
      logging.info("[+]ShivaPushToDb Module: %d URLs found." % len(record['links']))
      i = 0
      for link in record['links']:
	insertLink = "INSERT INTO `links` (`spam_id`, `hyperlink`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(link) + "', '" + str(record['date']) + "')"
      
	try:
	  logging.info("Trying to save URLs in database.")
	  exeSql.execute(insertLink)
	  i += 1
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaPushToDb insert_link) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaPushToDb - insertLink) %s %s \n" % (key, e))
	  return None


    # Extracting and saving name of the sensor
    insertSensor = "INSERT INTO `sensors` (`spam_id`, `sensorID`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(record['sensorID']) + "', '" + str(record['date']) + "')"
  
    try:
      logging.info("Trying to push sensorID in database.")
      exeSql.execute(insertSensor)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaPushToDb insert_sensor - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaPushToDb - insertSensor) %s %s \n" % (key, e))
      return None
      
  del server.QueueReceiver.records[:]
  server.QueueReceiver.totalRelay = 0
  logging.info("[+]ShivaPushToDb Module: List and global list counter resetted.")
