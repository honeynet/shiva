import logging
import datetime

import MySQLdb as mdb

import server
import shivaconfig
import shivatacklequeue

def main(mailFields, matchedHash, exeSql, key, msgMailRequest):
    logging.info("[+]Inside shivaprocessold Module.")

    path = shivaconfig.queuePath
    records = server.QueueReceiver.records
    logging.info("Dictionary now has %d records" % len(records))

    for record in records:
        if record['spam_id'] is matchedHash:
            logging.info("[+]shivaprocessold Module: Comparing the spam with the old spam.")
            logging.info("Comparing old mail with existing entry")


            logging.info("[+]shivaprocessold Module: Checking for new attachments.")
            if mailFields['attachmentFileMd5']:
                logging.info("[+]shivaprocessold Module: Spam has some attachments.")

                i = 0
                while i < len(mailFields['attachmentFileMd5']):
                    if mailFields['attachmentFileMd5'][i] not in record['attachmentFileMd5']:
                        record['attachmentFile'].append(mailFields['attachmentFile'][i])
                        record['attachmentFileMd5'].append(mailFields['attachmentFileMd5'][i])
                        record['attachmentFileName'].append(mailFields['attachmentFileName'][i])

            if mailFields['links']:
                logging.info("[+]shivaprocessold Module: Some links found.")
                for newLink in mailFields['links']:
                    logging.info("newLink is %s and stored links are %s" % (newLink, str(record['links'])))
                    if newLink not in record['links']:
                        logging.info("[+]shivaprocessold Module: New Link(s) found.")
                        record['links'].append(newLink)

            if record['inlineFileMd5'] is not mailFields['inlineFileMd5']:
                i = 0
                while i < len(mailFields['inlineFileMd5']):
                    if mailFields['inlineFileMd5'][i] not in record['inlineFileMd5']:
                        record['inlineFile'].append(mailFields['inlineFile'][i])
                        record['inlineFileMd5'].append(mailFields['inlineFileMd5'][i])
                        record['inlineFileName'].append(mailFields['inlineFileName'][i])

            ipList = record['sourceIP'].split(", ")
            if mailFields['sourceIP'] not in ipList:
                logging.info("[+]shivaprocessold Module: Spam received from new IP.")
                record['sourceIP'] = record['sourceIP'] + ", " + mailFields['sourceIP']

            sensorIDs = record['sensorID'].split(", ")
            if mailFields['sensorID'] not in sensorIDs:
                logging.info("[+]shivaprocessold Module: Spam received from new Sensor.")
                record['sensorID'] = record['sensorID'] + ", " + mailFields['sensorID']

            logging.info("[+]shivaprocessold Module: Adding +1 to counter. ")
            record['counter'] += 1
            logging.info("[+]shivaprocessold Module: Indivisual and Global counters %s, %s" % (record['relayed'], server.QueueReceiver.totalRelay))

            if int(server.QueueReceiver.totalRelay) <= shivaconfig.relaycounter and int(record['relayed']) < shivaconfig.individualrelaycounter:
                logging.info("[+]shivaprocessold Module: Relay counter has not reached limit yet. I shall relay this.")
                shivatacklequeue.process_message(msgMailRequest)
                record['relayed'] += 1
                server.QueueReceiver.totalRelay += 1

            else:
                logging.critical("[+]shivaprocessold Module: Limit for this hour has been reached. Not relaying.")
