"""
Module to process the old spams. Checks if we've any new content in old mail.
"""
import server
import logging
import datetime
import ShivaConfig
import MySQLdb as mdb
import ShivaTackleQueue


#mailFields = {'headers':'', 'to':'', 'from':'', 'subject':'', 'date':'', 'firstSeen':'', 'lastSeen':'', 'firstRelayed':'', 'lastRelayed':'', 'sourceIP':'', 'sensorID':'', 'text':'', 'html':'', 'inlineFileName':[], 'inlineFile':[], 'inlineFileMd5':[], 'attachmentFileName':[], 'attachmentFile':[], 'attachmentFileMd5':[], 'links':[], 'spam_id':'', 'spamMd5':'', 'len':''}

def main(mailFields, matchedHash, exeSql, key, msgMailRequest):
  logging.info("[+]Inside ShivaProcessOld Module.")
  
  path = ShivaConfig.queuePath
  records = server.QueueReceiver.records
  logging.info("Dictionary now has %d records" % len(records))
  for record in records:
    if record['spam_id'] is matchedHash:
      logging.info("[+]ShivaProcessOld Module: Comparing the spam with the old spam.")
      #flag = 0
      logging.info("Comparing old mail with existing entry")
      
      
      logging.info("[+]ShivaProcessOld Module: Checking for new attachments.")
      if mailFields['attachmentFileMd5']:
	logging.info("[+]ShivaProcessOld Module: Spam has some attachments.")
	
	i = 0
	while i < len(mailFields['attachmentFileMd5']):
	  if mailFields['attachmentFileMd5'][i] not in record['attachmentFileMd5']:
	    #flag = 1
	    
	    fileName = str(mailFields['spamMd5']) + "-a-" + str(mailFields['attachmentFileName'][i]) + "-" + str(datetime.datetime.now()).split(".")[1]
	    logging.info("Trying to dump attachment file in local directory.")
	    path = '/home/template/dumps/attachments/' + fileName 
	    attachFile = open(path, 'wb')
	    attachFile.write(mailFields['attachmentFile'][i])
	    attachFile.close()
	    logging.info("[+]ShivaProcessOld Module: Attachment dumped with filename %s " % fileName)
	    record['attachmentFile'][i] = path
	    
	    record['attachmentFileMd5'].append(mailFields['attachmentFileMd5'][i])
	    record['attachmentFileName'].append(mailFields['attachmentFileName'][i])
	    
	    #insertAttachment = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Attachment' + "', '" + str(mailFields['attachmentFileMd5'][i]) + "', '" + str(mailFields['date']) + "')"
      
	    #try:
	      #logging.info("Trying to insert attachment's info in database.")
	      #exeSql.execute(insertAttachment)
	      #i += 1
	    #except mdb.Error, e:
	      #logging.critical("[-] Error (ShivaProcessOld insert_attachment) - %d: %s" % (e.args[0], e.args[1]))
	      ##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaProcessOld - insertAttachment) %s %s \n" % (key, e))
	      #return None
	    
      if mailFields['links']:
	logging.info("[+]ShivaProcessOld Module: Some links found.")
	for newLink in mailFields['links']:
	  logging.info("newLink is %s and stored links are %s" % (newLink, str(record['links'])))
	  if newLink not in record['links']:
	    logging.info("[+]ShivaProcessOld Module: New Link(s) found.")
	    #flag = 1
	    record['links'].append(newLink)
	    
	    #insertLink = "INSERT INTO `links` (`spam_id`, `hyperlink`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(newLink) + "', '" + str(mailFields['date']) + "')"
      
	    #try:
	      #logging.info("[+]ShivaProcessOld Module: Trying to save link in database.")
	      #exeSql.execute(insertLink)
	    #except mdb.Error, e:
	      #logging.critical("[-] Error (ShivaProcessOld insert_link) - %d: %s" % (e.args[0], e.args[1]))
	    ##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaProcessOld - insertLink) %s %s \n" % (key, e))
	    #return None  
	
      if record['inlineFileMd5'] is not mailFields['inlineFileMd5']:
	i = 0
	while i < len(mailFields['inlineFileMd5']):
	  if mailFields['inlineFileMd5'][i] not in record['inlineFileMd5']:
	    logging.info("[+]ShivaProcessOld Module: New inline attachment found.")
	    #flag = 1
	    fileName = str(record['spamMd5']) + "-a-" + str(mailFields['inlineFileName'][i]) + "-" + str(datetime.datetime.now()).split(".")[1]

	    logging.info("Trying to dump inline attachment in local directory.")
	    path = '/home/template/dumps/inlines/' + fileName 
	    attachFile = open(path, 'wb')
	    attachFile.write(mailFields['inlineFile'][i])
	    attachFile.close()
	    logging.info("[+]ShivaProcessOld Module: Inline attachment dumped with file name %s " % fileName)
	    record['inlineFile'][i] = path
	    
	    record['inlineFileMd5'].append(mailFields['inlineFileMd5'][i])
	    record['inlineFileName'].append(mailFields['inlineFileName'][i])
	    
	    #insertAttachment = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Inline' + "', '" + str(mailFields['inlineFileMd5'][i]) + "', '" + str(mailFields['date']) + "')"
      
	    #try:
	      #logging.info("[+]ShivaProcessOld Module: Tryin to push inline attachment's info in database.")
	      #exeSql.execute(insertAttachment)
	      #i += 1
	    #except mdb.Error, e:
	      #logging.critical("[-] Error (ShivaProcessOld insert_attachment inline) - %d: %s" % (e.args[0], e.args[1]))
	      ##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaProcessOld - Inline insertAttachment) %s %s \n" % (key, e))
	      #return None
	
      ipList = record['sourceIP'].split(", ")
      if mailFields['sourceIP'] not in ipList:
	logging.info("[+]ShivaProcessOld Module: Spam received from new IP.")
	#flag = 1
	record['sourceIP'] = record['sourceIP'] + ", " + mailFields['sourceIP']
	#updateIP = "UPDATE `spam` SET `sourceIP` = '" + str(record['sourceIP']) + "' WHERE `id` = '" + str(record['spamMd5']) + "'"
	#try:
	  #logging.info("[+]ShivaProcessOld Module: Trying toupdate IP column as spam came from new IP.")
	  #exeSql.execute(updateIP)
	#except mdb.Error, e:
	    #logging.critical("[-] Error (ShivaProcessOld update_ip) - %d: %s" % (e.args[0], e.args[1]))
	    ##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaProcessOld - updateIP) %s %s \n" % (key, e))
	    #return None  
      sensorIDs = record['sensorID'].split(", ")
      if mailFields['sensorID'] not in sensorIDs:
	logging.info("[+]ShivaProcessOld Module: Spam received from new Sensor.")
	#flag = 1
	record['sensorID'] = record['sensorID'] + ", " + mailFields['sensorID']
	    
      logging.info("[+]ShivaProcessOld Module: Adding +1 to counter. ")
      record['counter'] += 1
      #updateCounter = "UPDATE `spam` SET `totalCounter` = `totalCounter` + 1 WHERE id = '" + str(record['spamMd5']) + "'"
      #try:
	#logging.info("[+]ShivaProcessOld Module: Trying to increase counter in database.")
	#exeSql.execute(updateCounter)
      #except mdb.Error, e:
	#logging.critical("[-] Error (ShivaProcessOld update_ip) - %d: %s" % (e.args[0], e.args[1]))
	##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaProcessOld - updateIP) %s %s \n" % (key, e))
	#return None
	
      #logging.info("Removing the old spam from mail directory.")
      
      #fileName = path + key
      #remove(fileName)
      
      #getCount = "SELECT sum(relayCounter) FROM `spam` WHERE 1"
      #getIndivisualCount = "SELECT `relayCounter` FROM `spam` WHERE `id` = '" + str(record['spamMd5']) + "'"
      
      #try:
	#logging.info("[+]ShivaProcessOld Module: Getting the number of mails relayed this hour. Both indivisual and global count.")
	#exeSql.execute(getCount)
	#totalRelayed = exeSql.fetchone()
	#exeSql.execute(getIndivisualCount)
	#indiRelayed = exeSql.fetchone()
      
      #except mdb.Error, e:
	#logging.critical("[-] Error (ShivaProcessOld insert_sensor - %d: %s" % (e.args[0], e.args[1]))
	##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaAddNewRecord - insertSensor) %s %s \n" % (key, e))
	#return None
    
      logging.info("[+]ShivaProcessOld Module: Indivisual and Global counters %s, %s" % (record['relayed'], server.QueueReceiver.totalRelay))
      
      if int(server.QueueReceiver.totalRelay) <= ShivaConfig.relayCounter and int(record['relayed']) < ShivaConfig.individualRelayCounter:
	logging.info("[+]ShivaProcessOld Module: Relay counter has not reached limit yet. I shall relay this.")
	#insertRelay = "UPDATE `spam` SET `relayCounter` = `relayCounter` + 1, `relayTime` = '" + str(datetime.datetime.now()) + "' WHERE `id` = '" + str(record['spamMd5']) + "'"
	#try:
	  #logging.info("[+]ShivaAddNewRecord Module: Trying to update relay counter and relay time.")
	  #exeSql.execute(insertRelay)
	#except mdb.Error, e:
	  #logging.critical("[-] Error (ShivaProcessOld insert_relay) - %d: %s" % (e.args[0], e.args[1]))
	  ##ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaAddNewRecord - insertSensor) %s %s \n" % (key, e))
	  #return None
	
	#ShivaTackleQueue.process_message(msgMailRequest)    
	record['relayed'] += 1
	server.QueueReceiver.totalRelay += 1
  
      else:
	logging.critical("[+]ShivaProcessOld Module: Limit for this hour has been reached. Not relaying. :(")
