"""This module fetched data from database and local file system to be sent to hpfeeds.
Currently, we're using only one channel for testing purpose.
"""

#!/usr/bin/env python

import threading
import json
import os
import sys

import hpfeeds
import MySQLdb as mdb

import dbconfig

url_list, ip_list = [], []
channels = {'url': 'shiva.test', 'raw_spam': 'shiva.test', 'attachment': 'shiva.test', 'ips': 'shiva.test'}
lock = threading.Lock() # To lock the thread when we're publishing on hpfeeds.

host = ' '
port = 
ident = ' '
secret = ' '

def send_urls():
    for row in url_list:
        d = {'type': 'url', 'id': row['id'], 'url': row['link']}
        data = json.dumps(d)
        with lock:
            hpc.publish(channels['url'], data)
    
def send_raw():
    path = {'temp': '/home/template/dumps/raw/'}
    
    for f in os.listdir(path['temp']):
        spam_id = f.split('-')[0]
        ip = f.split('-')[-2]
        spamfile = open(path['temp']+f, 'r').read()
        d = {'type': 'raw', 'id': spam_id, 'spamfile': spamfile, 'ip': ip, 'name': f}
        data = json.dumps(d)
        with lock:
            hpc.publish(channels['url'], data)
        
    
def send_attach():
    path = {'temp': '/home/template/dumps/attach/'}
    
    for f in os.listdir(path['temp']):
        spam_id = f.split('-')[0]
        name = f.split('-')[1]
        attachment = open(path['temp']+f, 'r').read()
        d = {'type': 'attach', 'id': spam_id, 'attachment': attachment, 'name': name}
        data = json.dumps(d)
        with lock:
            hpc.publish(channels['url'], data)
    
def send_ips():
    for row in ip_list:
        d = {'type': 'ip', 'id': row['id'], 'ips': row['ips']}
        data = json.dumps(d)
        with lock:
            hpc.publish(channels['ips'], data)
    
def main():
    getdata()
   
    url_thread = threading.Thread(target = send_urls, args = [])
    raw_thread = threading.Thread(target = send_raw, args = [])
    attach_thread = threading.Thread(target = send_attach, args = [])
    ip_thread = threading.Thread(target = send_ips, args = [])
     
    try: 
        url_thread.run()
        raw_thread.run()
        attach_thread.run()
        ip_thread.run()
    except Exception, e:
        print e
    
    while url_thread.isAlive() or raw_thread.isAlive() or attach_thread.isAlive() or ip_thread.isAlive():
        pass


def getdata():
    """This function is used to fetch the IPs and URLs from the temporary database.
    This data is sent to hpfeeds.
    """
    # Getting URLs
    urlquery = "SELECT `spam_id`, `hyperlink` FROM `links` WHERE 1"
    try:
        exeSql.execute(urlquery)
    except mdb.Error, e:
        pass
        
    urls = exeSql.fetchall()
    for record in urls:
        url = {'id': record[0], 'link': record[1]}
        url_list.append(url)
        
     # Getting IPs
    ipquery = "SELECT `id`, `sourceIP` FROM `spam` WHERE 1"
    try:
        exeSql.execute(ipquery)
    except mdb.Error, e:
        pass
         
    ips = exeSql.fetchall()
    for record in ips:
        ip = {'id': record[0], 'ips': record[1]}
        ip_list.append(ip)
        
     
     
if __name__ == '__main__':
   hpc = hpfeeds.new(host, port, ident, secret)
   exeSql = dbconfig.dbconnect()
   main()
