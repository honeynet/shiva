
#This file is no longer used in SHIVA.
 
"""
This module deals with old combos i.e. those spams whose enteries are already in our DB

Combo = From + Subject + Date, and is determined in ShivaMailParser module

Any new spam would fall under two broad categories:
  1. New Combo
  2. Old Combo

If New Combo:
> Dump spam into DB (spam table)
> Increase Total Counter of spams in spamPot.spam.totalCounter
> Make decision on basis of "Relay Counter (RC) for the day" whether to relay or not. e.g if RC<100 -> Relay, else don't relay. Relay counter = Sum (individual counters in relay table)
> Increment individual counter IC in relay table if relayed
> Remove message from QueueReceiver

If Old Combo:
> Check if any new attachment has come
> If yes - save that attachment, if no - don't save anything
> In both cases, increase Total Counter (TC) in spamPot.spam.totalCounter
> Make decision on basis of "Relay Counter" (RC) and Individual Counter (IC) - if (IC < 10 && RC < 100) - Relay, if [(IC = 10 && RC < 100) || if (IC < 10 && RC = 100)] - Don't relay
> If relayed - increment IC in relay table
> Remove message from QueueReceiver
"""
import server
import os, sys, logging
import MySQLdb as mdb
import ShivaConfig, ShivaTackleQueue
import time, datetime

#mailFields = {'to':'', 'from':'', 'subject':'', 'date':'', 'text':'', 'html':'', 'inlineFileName':[], 'inlineFile':[], 'inlineFileMd5':[], 'attachmentFileName':[], 'attachmentFile':[], 'attachmentFileMd5':[], 'links':[]}

queuePath = ShivaConfig.queuePath

def pushIntoDB(mailFields, key, msgMailRequest, exeSql, matchedHash):
  #Since we're using fuzzy hashes to compare to mails, `matchedHash` here denotes the hash whose comparision ratio was above threshold.
  #exeSql = ShivaConfig.dbConnect()				# Call to dbConnect() module; connect to DB
  # Logic is:
  # > Same "from" + "subject" + "date" combo might come with different md5s. We shall not loose any attachment
  # > Under such case, we shall just save the attachment and increase the counters accordingly 
  
  # Old Combo
  # Step 1: check if new attachment(s) has/have come with old combo
  # Step 2: if yes, save attachment(s), retrive spamPot.spam.totalCounter for combo and increase it by 1
  # Step 3: if no, don't save attachment(s), retrive spamPot.spam.totalCounter for combo and increase it by 1
  # Step 4: put relay test cases:
  #	  : if individual_relayed_today < 10 && totalRelayed_today < 100 -> relay, retrive individual_relayed_today & totalRelayed and increment by 1
  #	  : if (individual_relayed_today = 10 && totalRelayed_today < 100 ) or (individual_relayed_today < 10 && totalRelayed_today = 100) - don't relay
  # Step 5: remove message from queue
  #matchedHash = matchedHash.encode("utf-8")
  logging.critical("Inside ShivaOldSpam")
    
  #mailFields['lastSeen'] =  datetime.datetime.now()
  #mailFields['date'] = datetime.date.today()
    
  # > Update "lastSeen" for spam whose copy has received again on same date
  
  date = 0							# date = 0 (received first copy of old spam today - update firstseen and lastseen for today)
								# date = 1 (received next copy of old spam today - update lastseen for today)
  #checkDate = "SELECT spamPot09252012.sdate.date FROM spamPot09252012.sdate WHERE spamPot09252012.sdate.date = '"+ str(mailFields['date'])+"' AND spamPot09252012.sdate.spam_id = '"+ str(mailFields['spam_id'])+"'"
  
  #checkDate = "SELECT spamPot09252012.sdate.date FROM spamPot09252012.sdate JOIN spamPot09252012.sdate_spam ON (spamPot09252012.sdate.id = spamPot09252012.sdate_spam.date_id) WHERE spamPot09252012.sdate_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND spamPot09252012.sdate.date = '"+ str(mailFields['date'])+"'" 
  
  matchedHash = matchedHash.split("'")[1]
  
  # 16th Nov, 2012
  checkDate = "SELECT sdate.date FROM sdate JOIN sdate_spam ON (sdate.id = sdate_spam.date_id) WHERE sdate_spam.spam_id = '" + matchedHash + "' AND sdate.date = '" + str(mailFields['date']) + "'" 
  
  #logging.critical("checkDate: %s and value %s " % (checkDate, matchedHash))
  #sys.exit(1)
  try:
    exeSql.execute(checkDate)
    if len(exeSql.fetchall()) >= 1:
      date = 1
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - retriving date from DB) - %d: %s" % (e.args[0], e.args[1]))
    #ShivaConfig.errorHandling(key, msgMailRequest)
    ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - retriving date from DB) %s %s \n" % (key, e))
    return None
    
        
  if date == 0:
    logging.critical("Seems new date for old spam")
    #sys.exit(1)
    #insert_sdate = "INSERT INTO spamPot09252012.sdate (`date`, `firstSeen`, `lastSeen`, `todaysCounter`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['firstSeen'])+"', '"+str(mailFields['lastSeen'])+"', '1')"
    
    # 16th Nov, 2012
    insert_sdate = "INSERT INTO sdate (`date`, `firstSeen`, `lastSeen`, `todaysCounter`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['firstSeen'])+"', '"+str(mailFields['lastSeen'])+"', '1')"
    
    try:
      exeSql.execute(insert_sdate)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_sdate) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_sdate) %s %s \n" % (key, e))
      return None
    
    
    # Insert into sdate_spam - table for many-to-many between spam and sdate tables
    #insert_sdate_spam = "INSERT INTO spamPot09252012.sdate_spam (`spam_id`, `date_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    # 16th Nov, 2012
    insert_sdate_spam = "INSERT INTO sdate_spam (`spam_id`, `date_id`) VALUES('" + matchedHash + "', '" + str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_sdate_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_sdate_spam) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_sdate_spam) %s %s \n" % (key, e))
      return None  
    
  else:

    logging.critical("Old spam & already seen today")
    #sys.exit(1)
    #insert_date = "UPDATE spamPot.spam_date SET spamPot.spam_date.lastSeen = '"+str(mailFields['lastSeen'])+"', spamPot.spam_date.todaysCounter = spamPot.spam_date.todaysCounter + 1 WHERE spamPot.spam_date.comboMD5 = '"+ str(mailFields['comboMD5'])+"'"
    #update_date = "UPDATE spamPot09252012.sdate JOIN spamPot09252012.sdate_spam ON (spamPot09252012.sdate.id = spamPot09252012.sdate_spam.date_id) SET spamPot09252012.sdate.lastSeen = '"+str(mailFields['lastSeen'])+"', spamPot09252012.sdate.todaysCounter = spamPot09252012.sdate.todaysCounter + 1 WHERE spamPot09252012.sdate_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND spamPot09252012.sdate.date = '"+ str(mailFields['date'])+"'"
    
    # 16th Nov, 2012
    update_date = "UPDATE sdate JOIN sdate_spam ON (sdate.id = sdate_spam.date_id) SET sdate.lastSeen = '" + str(mailFields['lastSeen'])+"', sdate.todaysCounter = sdate.todaysCounter + 1 WHERE sdate_spam.spam_id = '" + matchedHash + "' AND sdate.date = '" + str(mailFields['date'])+"'"
  
    #logging.critical("update_date: %s", update_date)
    
    try:
      exeSql.execute(update_date)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaNewSpam: update_date) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - update_sdate) %s %s \n" % (key, e))
      return None
      
    #sys.exit(1)
  #lastSeen = "UPDATE spamPot.spam SET spamPot.spam.lastSeen = '"+str(datetime.datetime.now())+"' WHERE spamPot.spam.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"
  #lastSeen = "UPDATE spamPot.spam SET spamPot.spam.lastSeen = '"+str(datetime.datetime.now())+"' WHERE spamPot.spam.from ='"+ mailFields['from']+"' AND spamPot.spam.subject ='"+ mailFields['subject']+"' AND spamPot.spam.date = '"+ str(mailFields['date'])+"'"
  #lastSeen = "UPDATE spamPot.spam SET spamPot.spam.lastSeen = '"+str(mailFields['lastSeen'])+"' WHERE spamPot.spam.comboMD5 ='"+str(mailFields['comboMD5'])+"'"
    
  #logging.critical("lastSeen: %s", lastSeen)
    
  #try:
    #exeSql.execute(lastSeen)
  #except mdb.Error, e:
    #logging.critical("[-] Error (ShivaOldSpam - lastSeen) - %d: %s" % (e.args[0], e.args[1]))
    #ShivaConfig.errorHandling(key, msgMailRequest)
    #return None
    
    
  # > Insert source IP of spammer into table if new source IP is found
  
  #checkIP = "SELECT spamPot.spam_ip.sourceIP FROM spamPot.spam_ip WHERE spamPot.spam_ip.from ='"+ mailFields['from']+"' AND spamPot.spam_ip.subject ='"+ mailFields['subject']+"' AND spamPot.spam_ip.date = '"+ str(mailFields['date'])+"'"
  
  #checkIP = "SELECT spamPot.spam_ip.sourceIP FROM spamPot.spam_ip WHERE spamPot.spam_ip.comboMD5 = '"+ str(mailFields['comboMD5'])+"'"
  
  # 04th Sep, 2012
  ipStatus = 1
  #checkIP = "SELECT spamPot09252012.ip.sourceIP FROM spamPot09252012.ip WHERE spamPot09252012.ip.spam_id = '"+str(mailFields['spam_id'])+"' AND spamPot09252012.ip.sourceIP = '"+str(mailFields['sourceIP'])+"'"
  
  #checkIP = "SELECT spamPot09252012.ip.sourceIP FROM spamPot09252012.ip JOIN spamPot09252012.ip_spam ON (spamPot09252012.ip.id = spamPot09252012.ip_spam.ip_id) WHERE spamPot09252012.ip_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND spamPot09252012.ip.sourceIP = '"+str(mailFields['sourceIP'])+"'"
  
  # 16th Nov, 2012
  checkIP = "SELECT ip.sourceIP FROM ip JOIN ip_spam ON (ip.id = ip_spam.ip_id) WHERE ip_spam.spam_id = '" + matchedHash + "' AND ip.sourceIP = '" + str(mailFields['sourceIP']) + "'"
  
  try:
    exeSql.execute(checkIP)
    if len(exeSql.fetchall()) >= 1:
      ipStatus = 0
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkIP) - %d: %s" % (e.args[0], e.args[1]))
    #ShivaConfig.errorHandling(key, msgMailRequest)
    ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - checkIP) %s %s \n" % (key, e))
    return None
	
  #row = exeSql.fetchall()					
  
  '''	  
  while(1):
    row = exeSql.fetchone()				# read stored IPs one by one
    if row == None:					# break after last IP has read
      break
    if mailFields['sourceIP'] != row[0]:		# compare incoming source IP against stored ones
      ipStatus = 1
      continue						# continue till a match is found, else go to "else" and get ipStatus = 0
    else:
      ipStatus = 0
      break
  '''
  '''
  rows = exeSql.fetchall()
  for row in rows:
    if mailFields['sourceIP'] == row[0]:
      ipStatus = 0
      break
    else:
      pass
  
  '''
    # i.e., if IP not found in DB
  if ipStatus == 1:
    logging.critical("ShivaOldSpam - IPstatus = 1 - New Source IP")
    #insert_ip = "INSERT INTO spamPot.spam_ip (`from`, `subject`, `sourceIP`) VALUES('"+str(mailFields['from'].replace("\\", "\\\\"))+"', '"+str(mailFields['subject'].replace("\\", "\\\\"))+"', '"+str(mailFields['sourceIP'])+"' )"
    #insert_ip = "INSERT INTO spamPot.spam_ip (`from`, `subject`, `date`, `sourceIP`, `comboMD5`) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['sourceIP'])+"', '"+str(mailFields['comboMD5'])+"' )"
    #insert_ip = "INSERT INTO spamPot09252012.ip (`date`, `sourceIP`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sourceIP'])+"' )"
    
    # 16th Nov, 2012
    insert_ip = "INSERT INTO ip (`date`, `sourceIP`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sourceIP'])+"' )"
    try:
      exeSql.execute(insert_ip)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam insert_ip) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_ip) %s %s \n" % (key, e))
      return None
      
    #insert_ip_spam = "INSERT INTO spamPot09252012.ip_spam (`spam_id`, `ip_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    # 16th Nov, 2012
    insert_ip_spam = "INSERT INTO ip_spam (`spam_id`, `ip_id`) VALUES('" + matchedHash + "', '"+str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_ip_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_ip_spam) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_ip_spam) %s %s \n" % (key, e))
      return None  
      
  # i.e. IP found in DB
  else:
    logging.critical("ShivaOldSpam - IPstatus = 0 - Old Source IP")
    pass
      
######  Copied code from Shiva Old here
    
  # > Insert sensor ID into table if same spam (old combo) received on another sensor
  
  #checkSensorID = "SELECT spamPot.spam_sensor.sensorID FROM spamPot.spam_sensor WHERE spamPot.spam_sensor.from ='"+ mailFields['from']+"' AND spamPot.spam_sensor.subject ='"+ mailFields['subject']+"' AND spamPot.spam_sensor.date = '"+ str(mailFields['date'])+"'"
  
  idStatus = 1
  #checkSensorID = "SELECT spamPot09252012.sensor.sensorID FROM spamPot09252012.sensor WHERE spamPot09252012.sensor.spam_id = '"+str(mailFields['spam_id'])+"' AND spamPot09252012.sensor.sensorID = '"+str(mailFields['sensorID'])+"'"
  
  #checkSensorID = "SELECT spamPot09252012.sensor.sensorID FROM spamPot09252012.sensor JOIN spamPot09252012.sensor_spam ON (spamPot09252012.sensor.id = spamPot09252012.sensor_spam.sensor_id) WHERE spamPot09252012.sensor_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND spamPot09252012.sensor.sensorID = '"+str(mailFields['sensorID'])+"'"
  
  # 16th Nov, 2012
  checkSensorID = "SELECT sensor.sensorID FROM sensor JOIN sensor_spam ON (sensor.id = sensor_spam.sensor_id) WHERE .sensor_spam.spam_id = '" + matchedHash + "' AND sensor.sensorID = '" + str(mailFields['sensorID']) + "'"
  try:
    exeSql.execute(checkSensorID)
    if len(exeSql.fetchall()) >= 1:
      idStatus = 0
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkSensorID) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
	
  #row = exeSql.fetchall()					
  #idStatus = 1
  '''	  
  while(1):
    row = exeSql.fetchone()				# read stored sensorIDs one by one
    if row == None:					# break after last ID has read
      break
    if mailFields['sensorID'] != row[0]:		# compare incoming source ID against stored ones
      idStatus = 1
      continue						# continue till a match is found, else go to "else" and get idStatus = 0
    else:
      idStatus = 0
      break
  '''
  '''
  rows = exeSql.fetchall()
  for row in rows:
    if mailFields['sensorID'] == row[0]:
      idStatus = 0
      break
    else:
      pass
  '''
  # i.e., if sensorID not found in DB
  if idStatus == 1:
    logging.critical("ShivaOldSpam - IDstatus = 1 - New Sensor")
    #insert_id = "INSERT INTO spamPot.spam_sensor (`from`, `subject`, `sensorID`) VALUES('"+str(mailFields['from'].replace("\\", "\\\\"))+"', '"+str(mailFields['subject'].replace("\\", "\\\\"))+"', '"+str(mailFields['sensorID'])+"' )"
    #insert_id = "INSERT INTO spamPot.spam_sensor (`from`, `subject`, `date`, `sensorID`, `comboMD5`) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['sensorID'])+"', '"+str(mailFields['comboMD5'])+"' )"
    #insert_id = "INSERT INTO spamPot09252012.sensor (`date`, `sensorID`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sensorID'])+"' )"
    
    # 16th Nov, 2012
    insert_id = "INSERT INTO sensor (`date`, `sensorID`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sensorID'])+"' )"
    try:
      exeSql.execute(insert_id)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam insert_id) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
         
    #insert_id_spam = "INSERT INTO spamPot09252012.sensor_spam (`spam_id`, `sensor_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    # 16th Nov, 2012
    insert_id_spam = "INSERT INTO sensor_spam (`spam_id`, `sensor_id`) VALUES('" + matchedHash + "', '" + str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_id_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_id_spam) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
    
  # i.e. IP found in DB
  else:
    logging.critical("ShivaOldSpam - IDstatus = 0 - Old Sensor ID")
    pass
    
######  Copied till here.
  # > Tackling attachments
  if len(mailFields['attachmentFile']) != 0:			# check whether any attachment has come with old combo
    logging.critical("ShivaOldSpam - attachment is there")
      
    # select all md5s of attachments for combo from DB
    #checkMD5 = "SELECT spamPot.spam_attachment.md5 FROM spamPot.spam_attachment WHERE spamPot.spam_attachment.from ='"+ mailFields['from']+"' AND spamPot.spam_attachment.subject ='"+ mailFields['subject']+"' AND spamPot.spam_attachment.date = '"+ str(mailFields['date'])+"'"
    #checkMD5 = "SELECT spamPot09252012.attachment.md5 FROM spamPot09252012.attachment WHERE spamPot09252012.attachment.spam_id = '"+ str(mailFields['spam_id'])+"'"
    
    # 16th Nov, 2012
    checkMD5 = "SELECT attachment.md5 FROM attachment WHERE attachment.spam_id = '" + matchedHash + "'"
    
    #logging.critical(checkMD5)
    try:
      exeSql.execute(checkMD5)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam - checkMD5) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - checkMD5) %s %s \n" % (key, e))
      return None
	
    row = exeSql.fetchall()
    logging.critical("printing row result:")
    logging.critical(row)   
      
    if row == ():						# i.e. there wasn't any attachment for old combo. Save the new attachment(s)
      logging.critical("ShivaOldSpam - No previous attachment for combo - save new attachment(s)")
      i = 0
      while i < len(mailFields['attachmentFile']):		# Save all attachments
	#insert_attachment = "INSERT INTO spamPot.spam_attachment (`from`, `subject`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type` ) VALUES('"+str(mailFields['from'].replace("\\", "\\\\"))+"', '"+str(mailFields['subject'].replace("\\", "\\\\"))+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"')"
	#insert_attachment = "INSERT INTO spamPot.spam_attachment (`from`, `subject`, `date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `comboMD5` ) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['comboMD5'])+"')"
	#insert_attachment = "INSERT INTO spamPot09252012.attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['spam_id'])+"')"
	
	# 16th Nov, 2012
	insert_attachment = "INSERT INTO attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('" + str(mailFields['date']) + "', '" + str(mailFields['attachmentFileMd5'][i]) + "', '" + str(mailFields['attachmentFileName'][i])+"', '" + str(mailFields['attachmentFile'][i])+"', '" + str(os.path.splitext(mailFields['attachmentFileName'][i])[1]) + "', '" + matchedHash + "')"
	  
	i = i + 1
	try:
	  exeSql.execute(insert_attachment)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_attachment) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest)
	  ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_attachment) %s %s \n" % (key, e))
	  return None
	    
    else:							# i.e., there was/were already attachment(s) for combo
      logging.critical("ShivaOldSpam - Some previous attachments for combo")
      i = 0
      md5Status = 0
	
      while i < len(mailFields['attachmentFile']):		# compare attachments under analysis with attachments stored in DB
	try:
	  exeSql.execute(checkMD5)				# need to re-execute because comparision of new attachment has to be made against all stored attachments of combo
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_attachment-1) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest)
	  ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_attachment-1) %s %s \n" % (key, e))
	  return None
	#exeSql.execute(checkMD5)
	while(1):
	  row = exeSql.fetchone()				# read stored attachments one by one
	  if row == None:					# break after last attachment has read
	    break
	  #logging.critical("value of i: ")
	  #logging.critical(i)
	  #logging.critical("value of row: ")
	  #logging.critical(row[0])
	  #logging.critical("value of md5: ")
	  #logging.critical(mailFields['attachmentFileMd5'][0])
	  if mailFields['attachmentFileMd5'][i] != row[0]:	# compare the md5 of new attachment against stored ones
	    md5Status = 1
	    continue						# continue till a match is found, else go to "else" and get md5Status = 0
	  else:
	    md5Status = 0
	    break
	    
	# i.e., if attachment not found in DB
	if md5Status == 1:
	  logging.critical("Gotta new attachments for old combo - saving them")
	  #logging.critical("md5status = 1")
	  #insert_attachment = "INSERT INTO spamPot.spam_attachment (`from`, `subject`, `md5`, `attachment_file_name`, `attachment_file` ) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"')"
	  #insert_attachment = "INSERT INTO spamPot.spam_attachment (`from`, `subject`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type` ) VALUES('"+str(mailFields['from'].replace("\\", "\\\\"))+"', '"+str(mailFields['subject'].replace("\\", "\\\\"))+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"')"
	  #insert_attachment = "INSERT INTO spamPot.spam_attachment (`from`, `subject`, `date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `comboMD5` ) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['comboMD5'])+"')"
	  #insert_attachment = "INSERT INTO spamPot09252012.attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['spam_id'])+"')"
	  
	  # 16th Nov, 2012
	  insert_attachment = "INSERT INTO attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('" + str(mailFields['date']) + "', '" + str(mailFields['attachmentFileMd5'][i]) + "', '" + str(mailFields['attachmentFileName'][i]) + "', '" + str(mailFields['attachmentFile'][i]) + "', '" + str(os.path.splitext(mailFields['attachmentFileName'][i])[1]) + "', '" + matchedHash + "')"
	  
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  try:
	    exeSql.execute(insert_attachment)
	  except mdb.Error, e:
	    logging.critical("[-] Error (ShivaOldSpam - insert_attachment-2) - %d: %s" % (e.args[0], e.args[1]))
	    #ShivaConfig.errorHandling(key, msgMailRequest)
	    ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_attachment-2) %s %s \n" % (key, e))
	    return None
	# i.e, if attachment is already there in DB
	else:
	  logging.critical("Gotta NO new attachment for old combo")
	  #logging.critical("md5status = 0")
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  continue
		
  else:
    logging.critical("ShivaOldSpam - NO attachment is there")# no attachment has come
    pass
  
  
  # > Tackling links
  if len(mailFields['links']) != 0:						# check whether any attachment has come with old combo
    logging.critical("ShivaOldSpam - link(s) is|are there")
      
        
    # 26th Nov, 2012
    checkLink = "SELECT links.hyperLink FROM links WHERE links.spam_id = '" + matchedHash + "'"
    
    #logging.critical(checkMD5)
    try:
      exeSql.execute(checkLink)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam - checkLink) - %d: %s" % (e.args[0], e.args[1]))
      #ShivaConfig.errorHandling(key, msgMailRequest)
      ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - checkLink) %s %s \n" % (key, e))
      return None
	
    row = exeSql.fetchall()					
      
    if row == ():							# i.e. there wasn't any link for old combo. Save the new link(s)
      logging.critical("ShivaOldSpam - No previous hyperlinks for combo - save new hyperlink(s)")
      i = 0
      while i < len(mailFields['links']):				# Save all links
		
	# 26th Nov, 2012
	insert_link = "INSERT INTO links (`date`, `hyperLink`, `spam_id` ) VALUES('" + str(mailFields['date']) + "', '" + str(mailFields['links'][i]) + "', '" + matchedHash + "')"
	  
	i = i + 1
	try:
	  exeSql.execute(insert_link)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_link) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest)
	  ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_link) %s %s \n" % (key, e))
	  return None
	    
    else:							# i.e., there was/were already attachment(s) for combo
      logging.critical("ShivaOldSpam - Some previous links for combo")
      i = 0
      md5Status = 0
	
      while i < len(mailFields['links']):		# compare attachments under analysis with attachments stored in DB
	try:
	  exeSql.execute(checkLink)				# need to re-execute because comparision of new attachment has to be made against all stored attachments of combo
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_link-1) - %d: %s" % (e.args[0], e.args[1]))
	  #ShivaConfig.errorHandling(key, msgMailRequest)
	  ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_link-1) %s %s \n" % (key, e))
	  return None
	#exeSql.execute(checkMD5)
	while(1):
	  row = exeSql.fetchone()				# read stored attachments one by one
	  if row == None:					# break after last attachment has read
	    break
	  #logging.critical("value of i: ")
	  #logging.critical(i)
	  #logging.critical("value of row: ")
	  #logging.critical(row[0])
	  #logging.critical("value of md5: ")
	  #logging.critical(mailFields['attachmentFileMd5'][0])
	  if mailFields['links'][i] != row[0]:	# compare the md5 of new attachment against stored ones
	    md5Status = 1
	    continue						# continue till a match is found, else go to "else" and get md5Status = 0
	  else:
	    md5Status = 0
	    break
	    
	# i.e., if attachment not found in DB
	if md5Status == 1:
	  	  
	  # 26th Nov, 2012
	  logging.critical("Gotta new links for old combo - saving them")
	  insert_link = "INSERT INTO links (`date`, `hyperLink`, `spam_id` ) VALUES('" + str(mailFields['date']) + "', '" + str(mailFields['links'][i]) + "', '" + matchedHash + "')"
	  
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  try:
	    exeSql.execute(insert_link)
	  except mdb.Error, e:
	    logging.critical("[-] Error (ShivaOldSpam - insert_link-2) - %d: %s" % (e.args[0], e.args[1]))
	    #ShivaConfig.errorHandling(key, msgMailRequest)
	    ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - insert_link-2) %s %s \n" % (key, e))
	    return None
	# i.e, if attachment is already there in DB
	else:
	  logging.critical("Gotta NO new link for old combo")
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  continue
		
  else:
    logging.critical("ShivaOldSpam - NO link is there")# no attachment has come
    pass
  
  
  
  #logging.critical("ShivaOldSpam - updating total counter")
  #totalCounter = "UPDATE spamPot.spam SET spamPot.spam.totalCounter = spamPot.spam.totalCounter + 1 WHERE spamPot.spam.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"
  #totalCounter = "UPDATE spamPot.spam SET spamPot.spam.totalCounter = spamPot.spam.totalCounter + 1 WHERE spamPot.spam.from ='"+ mailFields['from']+"' AND spamPot.spam.subject ='"+ mailFields['subject']+"' AND spamPot.spam.date = '"+ str(mailFields['date'])+"'"
  #totalCounter = "UPDATE spamPot09252012.spam SET spamPot09252012.spam.totalCounter = spamPot09252012.spam.totalCounter + 1 WHERE spamPot09252012.spam.id = '"+ str(mailFields['spam_id'])+"'"
  
  # 16th Nov, 2012
  totalCounter = "UPDATE spam SET spam.totalCounter = spam.totalCounter + 1 WHERE spam.id = '" + matchedHash + "'"
  
  try:
    exeSql.execute(totalCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - totalCounter) - %d: %s" % (e.args[0], e.args[1]))
    #ShivaConfig.errorHandling(key, msgMailRequest)
    ShivaConfig.errorHandling(key, msgMailRequest, "[-] Error (ShivaOldSpam - totalCounter) %s %s \n" % (key, e))
    return None
      
  # > Checks for relay counters - if individual relay quota for one or total relay quota for all has reached its limit
    
  # Calcuate total mails relayed today, or in specific amount of time as per our schedular
  logging.critical("checking counter")
  #checkCounter = "SELECT sum(spamPot09252012.relay.relayCounter) FROM spamPot09252012.relay"
  # After adding coloumn "sensorID" in relay table
  #checkCounter = "SELECT sum(spamPot09252012.relay.relayCounter) FROM spamPot09252012.relay WHERE spamPot09252012.relay.sensorID = '"+ str(mailFields['sensorID'])+"'"
  
  # 16th Nov, 2012
  checkCounter = "SELECT sum(relay.relayCounter) FROM relay WHERE relay.sensorID = '"+ str(mailFields['sensorID'])+"'"
  try:
    exeSql.execute(checkCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkCounter) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
  
  totalRelayedToday = exeSql.fetchone()
  #logging.critical("totalRelayedToday: %s", totalRelayedToday)
  logging.critical("totalRelayedToday[0]: %s", totalRelayedToday[0])
    
    
    # Calculate individual mails relayed today
  logging.critical("checking individual counter")
    #individualCounter = "SELECT spamPot.spam_relay.relayCounter FROM spamPot.spam_relay WHERE spamPot.spam_relay.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"  
    #individualCounter = "SELECT spamPot.spam_relay.relayCounter FROM spamPot.spam_relay WHERE spamPot.spam_relay.from ='"+ mailFields['from']+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject']+"' AND spamPot.spam_relay.date = '"+ str(mailFields['date'])+"'"  
  #individualCounter = "SELECT spamPot09252012.relay.relayCounter FROM spamPot09252012.relay WHERE spamPot09252012.relay.spam_id = '"+ str(mailFields['spam_id'])+"'"  
  
  # 16th Nov, 2012
  individualCounter = "SELECT relay.relayCounter FROM relay WHERE relay.spam_id = '" + matchedHash + "'"  
    #logging.critical("individualCounter: ")
    #logging.critical(individualCounter)
  try:
    exeSql.execute(individualCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - individualCounter) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
      
  individualRelayedToday = exeSql.fetchone()  
    #logging.critical("individualRelayedToday: %s", individualRelayedToday)
    
    #logging.critical(individualRelayedToday)
    #logging.critical("relay Counter")
    #logging.critical(relayCounter[0])
    #logging.critical("checking counter checks")
    
  if individualRelayedToday != None:					# Value 'None' is possible for old spam if it did not get chance to get relayed previous times as per our counters restrictions
    try:
      if individualRelayedToday[0] < ShivaConfig.individualRelayCounter and totalRelayedToday[0] < ShivaConfig.relayCounter:	# Conditions met - relay the spam
	#queueFilter.process_message(msgMailRequest)
	logging.critical("ShivaOldSpam - Counter Check Ok - I shall relay the spam")      
	#counters1 = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.relayCounter = spamPot.spam_relay.relayCounter + 1 WHERE spamPot.spam_relay.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"
	#counters1 = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.relayCounter = spamPot.spam_relay.relayCounter + 1 WHERE spamPot.spam_relay.from ='"+ mailFields['from']+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject']+"' AND spamPot.spam_relay.date = '"+ str(mailFields['date'])+"'"
	#counters1 = "UPDATE spamPot09252012.relay SET spamPot09252012.relay.relayCounter = spamPot09252012.relay.relayCounter + 1 WHERE spamPot09252012.relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
	
	# 16th Nov, 2012
	counters1 = "UPDATE relay SET relay.relayCounter = relay.relayCounter + 1 WHERE relay.spam_id = '" + matchedHash + "'"
	
	#counters2 = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.totalRelayed = spamPot.spam_relay.totalRelayed + 1 WHERE spamPot.spam_relay.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"
	#counters2 = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.totalRelayed = spamPot.spam_relay.totalRelayed + 1 WHERE spamPot.spam_relay.from ='"+ mailFields['from']+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject']+"' AND spamPot.spam_relay.date = '"+ str(mailFields['date'])+"'"
	#counters2 = "UPDATE spamPot09252012.relay SET spamPot09252012.relay.totalRelayed = spamPot09252012.relay.totalRelayed + 1 WHERE spamPot09252012.relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
	
	# 16th Nov, 2012
	counters2 = "UPDATE relay SET relay.totalRelayed = relay.totalRelayed + 1 WHERE relay.spam_id = '" + matchedHash + "'"
	
	try:
	  exeSql.execute(counters1)
	  exeSql.execute(counters2)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - counters) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	  
	#mailFields['lastRelayed'] =  datetime.datetime.now()
    
	# Update "lastRelayed" for spam
	  #lastRelayed = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.lastRelayed = '"+str(datetime.datetime.now())+"' WHERE spamPot.spam_relay.from ='"+ mailFields['from'].replace("\\", "\\\\")+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject'].replace("\\", "\\\\")+"'"
	  #lastRelayed = "UPDATE spamPot.spam_relay SET spamPot.spam_relay.lastRelayed = '"+str(datetime.datetime.now())+"' WHERE spamPot.spam_relay.from ='"+ mailFields['from']+"' AND spamPot.spam_relay.subject ='"+ mailFields['subject']+"' AND spamPot.spam_relay.date = '"+ str(mailFields['date'])+"'"
	#lastRelayed = "UPDATE spamPot09252012.relay SET spamPot09252012.relay.lastRelayed = '"+str(datetime.datetime.now())+"' WHERE spamPot09252012.relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
	
	# 16th Nov, 2012
	lastRelayed = "UPDATE relay SET relay.lastRelayed = '" + str(datetime.datetime.now()) + "' WHERE relay.spam_id = '" + matchedHash + "'"
	
	#logging.critical("lastSeen: %s", lastSeen)
    
	try:
	  exeSql.execute(lastRelayed)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - lastRelayed) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	  
	ShivaTackleQueue.process_message(msgMailRequest)
	#ShivaConfig.sendRelayNotificationMail()
      else:
	logging.critical("ShivaOldSpam - Quota full, not relaying")
    except:
      logging.critical("ShivaOldSpam - Error in counters")
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
  else:						# i,e. spam is old but wasn't relayed earlier - totalRelayedToday would have restricted it from getting relayed
    try:
      if totalRelayedToday[0] < ShivaConfig.relayCounter:
	#mailFields['firstRelayed'] =  datetime.datetime.now()
	#mailFields['lastRelayed'] =  datetime.datetime.now()
	logging.critical("ShivaOldSpam: Relaying old-spam - It didn't get chance earlier to get relayed")
    #exeSql = spamConfig.dbConnect()
	  #insertRelay = "INSERT INTO spamPot.spam_relay (`from`, `subject`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`) VALUES('"+str(mailFields['from'].replace("\\", "\\\\"))+"', '"+str(mailFields['subject'].replace("\\", "\\\\"))+"', '"+str(mailFields['firstRelayed'])+"', '"+str(mailFields['lastRelayed'])+"', '1', '1')"
	  #insertRelay = "INSERT INTO spamPot.spam_relay (`from`, `subject`, `date`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['firstRelayed'])+"', '"+str(mailFields['lastRelayed'])+"', '1', '1')"
	#insertRelay = "INSERT INTO spamPot.spam_relay (`from`, `subject`, `date`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`, `comboMD5`) VALUES('"+str(mailFields['from'])+"', '"+str(mailFields['subject'])+"', '"+str(mailFields['date'])+"', '"+str(mailFields['firstRelayed'])+"', '"+str(mailFields['lastRelayed'])+"', '1', '1', '"+str(mailFields['comboMD5'])+"')"
	#insertRelay = "INSERT INTO spamPot09252012.relay (`date`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`, `spam_id`, `sensorID`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['firstRelayed'])+"', '"+str(mailFields['lastRelayed'])+"', '1', '1', '"+str(mailFields['spam_id'])+"', '"+str(mailFields['sensorID'])+"')"
	
	# 16th Nov, 2012
	insertRelay = "INSERT INTO relay (`date`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`, `spam_id`, `sensorID`) VALUES('"+str(mailFields['date']) + "', '" + str(mailFields['firstRelayed']) + "', '" + str(mailFields['lastRelayed']) + "', '1', '1', '" + matchedHash + "', '" + str(mailFields['sensorID'])+"')"
	
    #logging.critical(insertRelay)
	try:
	  exeSql.execute(insertRelay)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam: - insertRelay) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
      
	ShivaTackleQueue.process_message(msgMailRequest)  
	#ShivaConfig.sendRelayNotificationMail()
      else:
	logging.critical("[!] Info (ShivaOldSpam: insertRelay): Though the spam is old but wasn't relayed last time, and failed this time too")
    except:
      logging.critical("ShivaOldSpam: Again counter error :( Fix it man!!!")
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
    #logging.critical("about to remove message")
    # Last step - remove spam mail from queue  
    #removeMessage = server.QueueReceiver(queuePath)
    #removeMessage.remove_message(msgMailRequest)     
