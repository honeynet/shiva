 
"""
This module deals with old combos i.e. those spams whose entries are already in our DB

If Old Combo:
> Check if any new attachment has come
> If yes - save that attachment, if no - don't save anything
> In both cases, increase Total Counter (TC) in spamPot.spam.totalCounter
> Make decision on basis of "Relay Counter" (RC) and Individual Counter (IC) - if (IC < 10 && RC < 100) - Relay, if [(IC = 10 && RC < 100) || if (IC < 10 && RC = 100)] - Don't relay
> If relayed - increment IC in relay table
> Remove message from QueueReceiver
"""
import server
import os, sys, logging
import MySQLdb as mdb
import ShivaConfig, ShivaTackleQueue
import time, datetime

#mailFields = {'to':'', 'from':'', 'subject':'', 'date':'', 'text':'', 'html':'', 'inlineFileName':[], 'inlineFile':[], 'inlineFileMd5':[], 'attachmentFileName':[], 'attachmentFile':[], 'attachmentFileMd5':[], 'links':[]}

queuePath = ShivaConfig.queuePath

def pushIntoDB(mailFields, key, msgMailRequest, exeSql):
  
  logging.critical("Inside ShivaOldSpam")
    
  # > Update "lastSeen" for spam whose copy has received again on same date
  
  date = 0							# date = 0 (received first copy of old spam today - update firstseen and lastseen for today)
								# date = 1 (received next copy of old spam today - update lastseen for today)

  checkDate = "SELECT sdate.date FROM sdate JOIN sdate_spam ON (sdate.id = sdate_spam.date_id) WHERE sdate_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND sdate.date = '"+ str(mailFields['date'])+"'" 
 
  try:
    exeSql.execute(checkDate)
    if len(exeSql.fetchall()) >= 1:
      date = 1
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - retriving date from DB) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
    
        
  if date == 0:
    logging.critical("Seems new date for old spam")

    insert_sdate = "INSERT INTO sdate (`date`, `firstSeen`, `lastSeen`, `todaysCounter`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['firstSeen'])+"', '"+str(mailFields['lastSeen'])+"', '1')"
    
    try:
      exeSql.execute(insert_sdate)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_sdate) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
    
    insert_sdate_spam = "INSERT INTO sdate_spam (`spam_id`, `date_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_sdate_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_sdate_spam) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
    
  else:
    logging.critical("Old spam & already seen today")

    update_date = "UPDATE sdate JOIN sdate_spam ON (sdate.id = sdate_spam.date_id) SET sdate.lastSeen = '"+str(mailFields['lastSeen'])+"', sdate.todaysCounter = sdate.todaysCounter + 1 WHERE sdate_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND sdate.date = '"+ str(mailFields['date'])+"'"
    
    try:
      exeSql.execute(update_date)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaNewSpam: update_date) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
      
  # > Insert source IP of spammer into table if new source IP is found
  
  ipStatus = 1

  checkIP = "SELECT ip.sourceIP FROM ip JOIN ip_spam ON (ip.id = ip_spam.ip_id) WHERE ip_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND ip.sourceIP = '"+str(mailFields['sourceIP'])+"'"
  
  try:
    exeSql.execute(checkIP)
    if len(exeSql.fetchall()) >= 1:
      ipStatus = 0
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkIP) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
	
  if ipStatus == 1:
    logging.critical("ShivaOldSpam - IPstatus = 1 - New Source IP")

    insert_ip = "INSERT INTO ip (`date`, `sourceIP`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sourceIP'])+"' )"

    try:
      exeSql.execute(insert_ip)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam insert_ip) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
      
    insert_ip_spam = "INSERT INTO ip_spam (`spam_id`, `ip_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_ip_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_ip_spam) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
      
  # i.e. IP found in DB
  else:
    logging.critical("ShivaOldSpam - IPstatus = 0 - Old Source IP")
    pass
          
  idStatus = 1

  checkSensorID = "SELECT sensor.sensorID FROM sensor JOIN sensor_spam ON (sensor.id = sensor_spam.sensor_id) WHERE .sensor_spam.spam_id = '"+ str(mailFields['spam_id'])+"' AND sensor.sensorID = '"+str(mailFields['sensorID'])+"'"

  try:
    exeSql.execute(checkSensorID)
    if len(exeSql.fetchall()) >= 1:
      idStatus = 0
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkSensorID) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None

  # i.e., if sensorID not found in DB
  if idStatus == 1:
    logging.critical("ShivaOldSpam - IDstatus = 1 - New Sensor")

    insert_id = "INSERT INTO sensor (`date`, `sensorID`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['sensorID'])+"' )"

    try:
      exeSql.execute(insert_id)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam insert_id) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
         
    insert_id_spam = "INSERT INTO sensor_spam (`spam_id`, `sensor_id`) VALUES('"+str(mailFields['spam_id'])+"', '"+str(exeSql.lastrowid)+"')"
    
    try:
      exeSql.execute(insert_id_spam)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam: insert_id_spam) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
    
  # i.e. IP found in DB
  else:
    logging.critical("ShivaOldSpam - IDstatus = 0 - Old Sensor ID")
    pass
    
    
  # > Tackling attachments
  if len(mailFields['attachmentFile']) != 0:			# check whether any attachment has come with old combo
    logging.critical("ShivaOldSpam - attachment is there")
      
    checkMD5 = "SELECT attachment.md5 FROM attachment WHERE attachment.spam_id = '"+ str(mailFields['spam_id'])+"'"
    
    #logging.critical(checkMD5)
    try:
      exeSql.execute(checkMD5)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam - checkMD5) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
	
    row = exeSql.fetchall()	
    logging.critical("printing row result:")
    logging.critical(row)
      
    if row == ():
      logging.critical("ShivaOldSpam - No previous attachment for combo - save new attachment(s)")
      i = 0
      while i < len(mailFields['attachmentFile']):		# Save all attachments

	insert_attachment = "INSERT INTO attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['spam_id'])+"')"
	  
	i = i + 1
	try:
	  exeSql.execute(insert_attachment)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_attachment) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	    
    else:							# i.e., there was/were already attachment(s) for combo
      logging.critical("ShivaOldSpam - Some previous attachments for combo")
      i = 0
      md5Status = 0
	
      while i < len(mailFields['attachmentFile']):		# compare attachments under analysis with attachments stored in DB
	try:
	  exeSql.execute(checkMD5)				# need to re-execute because comparision of new attachment has to be made against all stored attachments of combo
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_attachment-1) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None

	while(1):
	  row = exeSql.fetchone()				# read stored attachments one by one
	  if row == None:					# break after last attachment has read
	    break

	  if mailFields['attachmentFileMd5'][i] != row[0]:	# compare the md5 of new attachment against stored ones
	    md5Status = 1
	    continue						# continue till a match is found, else go to "else" and get md5Status = 0
	  else:
	    md5Status = 0
	    break
	    
	# i.e., if attachment not found in DB
	if md5Status == 1:
	  logging.critical("Gotta new attachments for old combo - saving them")

	  insert_attachment = "INSERT INTO attachment (`date`, `md5`, `attachment_file_name`, `attachment_file`, `attachment_file_type`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['attachmentFileMd5'][i])+"', '"+str(mailFields['attachmentFileName'][i])+"', '"+str(mailFields['attachmentFile'][i])+"', '"+str(os.path.splitext(mailFields['attachmentFileName'][i])[1])+"', '"+str(mailFields['spam_id'])+"')"
	  
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  try:
	    exeSql.execute(insert_attachment)
	  except mdb.Error, e:
	    logging.critical("[-] Error (ShivaOldSpam - insert_attachment-2) - %d: %s" % (e.args[0], e.args[1]))
	    ShivaConfig.errorHandling(key, msgMailRequest)
	    return None
	# i.e, if attachment is already there in DB
	else:
	  logging.critical("Gotta NO new attachment for old combo")
	  i = i + 1								# in any case increase the counter to get next attachment of spam
	  continue
		
  else:
    logging.critical("ShivaOldSpam - NO attachment is there")			# no attachment has come
    pass
  
  
  # > Tackling links
  if len(mailFields['links']) != 0:						# check whether any attachment has come with old combo
    logging.critical("ShivaOldSpam - link(s) is|are there")
      
        
    # 26th Nov, 2012
    checkLink = "SELECT links.hyperLink FROM links WHERE links.spam_id = '"+ str(mailFields['spam_id'])+"'"
    
    try:
      exeSql.execute(checkLink)
    except mdb.Error, e:
      logging.critical("[-] Error (ShivaOldSpam - checkLink) - %d: %s" % (e.args[0], e.args[1]))
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
	
    row = exeSql.fetchall()					
      
    if row == ():
      logging.critical("ShivaOldSpam - No previous hyperlinks for combo - save new hyperlink(s)")
      i = 0
      while i < len(mailFields['links']):				# Save all links
		
	insert_link = "INSERT INTO links (`date`, `hyperLink`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['links'][i])+"', '"+str(mailFields['spam_id'])+"')"
	  
	i = i + 1
	try:
	  exeSql.execute(insert_link)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_link) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	    
    else:							# i.e., there was/were already attachment(s) for combo
      logging.critical("ShivaOldSpam - Some previous links for combo")
      i = 0
      md5Status = 0
	
      while i < len(mailFields['links']):		# compare attachments under analysis with attachments stored in DB
	try:
	  exeSql.execute(checkLink)				# need to re-execute because comparision of new attachment has to be made against all stored attachments of combo
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - insert_link-1) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None

	while(1):
	  row = exeSql.fetchone()				# read stored attachments one by one
	  if row == None:					# break after last attachment has read
	    break

	  if mailFields['links'][i] != row[0]:	# compare the md5 of new attachment against stored ones
	    md5Status = 1
	    continue						# continue till a match is found, else go to "else" and get md5Status = 0
	  else:
	    md5Status = 0
	    break
	    
	# i.e., if attachment not found in DB
	if md5Status == 1:
	  	  
	  logging.critical("Gotta new links for old combo - saving them")
	  insert_link = "INSERT INTO links (`date`, `hyperLink`, `spam_id` ) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['links'][i])+"', '"+str(mailFields['spam_id'])+"')"
	  
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  try:
	    exeSql.execute(insert_link)
	  except mdb.Error, e:
	    logging.critical("[-] Error (ShivaOldSpam - insert_link-2) - %d: %s" % (e.args[0], e.args[1]))
	    ShivaConfig.errorHandling(key, msgMailRequest)
	    return None
	# i.e, if attachment is already there in DB
	else:
	  logging.critical("Gotta NO new link for old combo")
	  i = i + 1						# in any case increase the counter to get next attachment of spam
	  continue
		
  else:
    logging.critical("ShivaOldSpam - NO link is there")# no attachment has come
    pass
  
  totalCounter = "UPDATE spam SET spam.totalCounter = spam.totalCounter + 1 WHERE spam.id = '"+ str(mailFields['spam_id'])+"'"
  
  try:
    exeSql.execute(totalCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - totalCounter) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
      
  
  # > Checks for relay counters - if individual relay quota for one or total relay quota for all has reached its limit
    
  # Calcuate total mails relayed today, or in specific amount of time as per our schedular
  logging.critical("checking counter")

  checkCounter = "SELECT sum(relay.relayCounter) FROM relay WHERE relay.sensorID = '"+ str(mailFields['sensorID'])+"'"
  try:
    exeSql.execute(checkCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - checkCounter) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
  
  totalRelayedToday = exeSql.fetchone()
  logging.critical("totalRelayedToday[0]: %s", totalRelayedToday[0])
    
    
    # Calculate individual mails relayed today
  logging.critical("checking individual counter")
  

  individualCounter = "SELECT relay.relayCounter FROM relay WHERE relay.spam_id = '"+ str(mailFields['spam_id'])+"'"  
  try:
    exeSql.execute(individualCounter)
  except mdb.Error, e:
    logging.critical("[-] Error (ShivaOldSpam - individualCounter) - %d: %s" % (e.args[0], e.args[1]))
    ShivaConfig.errorHandling(key, msgMailRequest)
    return None
      
  individualRelayedToday = exeSql.fetchone()  
    
  if individualRelayedToday != None:					# Value 'None' is possible for old spam if it did not get chance to get relayed previous times as per our counters restrictions
    try:
      if individualRelayedToday[0] < ShivaConfig.individualRelayCounter and totalRelayedToday[0] < ShivaConfig.relayCounter:	# Conditions met - relay the spam
	logging.critical("ShivaOldSpam - Counter Check Ok - I shall relay the spam")      

	counters1 = "UPDATE relay SET relay.relayCounter = relay.relayCounter + 1 WHERE relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
	
	counters2 = "UPDATE relay SET relay.totalRelayed = relay.totalRelayed + 1 WHERE relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
	
	try:
	  exeSql.execute(counters1)
	  exeSql.execute(counters2)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - counters) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	lastRelayed = "UPDATE relay SET relay.lastRelayed = '"+str(datetime.datetime.now())+"' WHERE relay.spam_id = '"+ str(mailFields['spam_id'])+"'"
    
	try:
	  exeSql.execute(lastRelayed)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam - lastRelayed) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
	  
	ShivaTackleQueue.process_message(msgMailRequest)

      else:
	logging.critical("ShivaOldSpam - Quota full, not relaying")
    except:
      logging.critical("ShivaOldSpam - Error in counters")
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None
  else:						# i,e. spam is old but wasn't relayed earlier - totalRelayedToday would have restricted it from getting relayed
    try:
      if totalRelayedToday[0] < ShivaConfig.relayCounter:
	logging.critical("ShivaOldSpam: Relaying old-spam - It didn't get chance earlier to get relayed")

	insertRelay = "INSERT INTO relay (`date`, `firstRelayed`, `lastRelayed`, `relayCounter`, `totalRelayed`, `spam_id`, `sensorID`) VALUES('"+str(mailFields['date'])+"', '"+str(mailFields['firstRelayed'])+"', '"+str(mailFields['lastRelayed'])+"', '1', '1', '"+str(mailFields['spam_id'])+"', '"+str(mailFields['sensorID'])+"')"
	
	try:
	  exeSql.execute(insertRelay)
	except mdb.Error, e:
	  logging.critical("[-] Error (ShivaOldSpam: - insertRelay) - %d: %s" % (e.args[0], e.args[1]))
	  ShivaConfig.errorHandling(key, msgMailRequest)
	  return None
      
	ShivaTackleQueue.process_message(msgMailRequest)  
      else:
	logging.critical("[!] Info (ShivaOldSpam: insertRelay): Though the spam is old but wasn't relayed last time, and failed this time too")
    except:
      logging.critical("ShivaOldSpam: Again counter error :( Fix it man!!!")
      ShivaConfig.errorHandling(key, msgMailRequest)
      return None  
