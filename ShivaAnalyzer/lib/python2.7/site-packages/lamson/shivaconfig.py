
"""
This file contains global variables used in various customised files.
Any change needed shall be made here and it would get reflected in customised files

"""

import os
import sys
import logging
import shutil
import smtplib

import MySQLdb as mdb

import server

dataBaseName = 'Temp'

# PATH for ShivaReceiver to dump mails into and for ShivaAnalyser (analyser) to retrieve mails from
queuePath = '/path/to/Shiva/ShivaReceiver/iReceiver/run/queue/new/'

# PATH for those spam samples which could not be handled by ShivaAnalyser properly
devilPath = '/path/to/Shiva/ShivaAnalyzer/iAnalyzer/ShivaDistortedSamples/'

# The maximum number of mails to be relayed in xx number of minutes/hours. ShivaScheduler flushes it to value 0 depending on scheduler cycle
relaycounter = 150
# The maximum number of mails to be relayed per spam.
individualrelaycounter = 5


def senderrornotificationmail(msg):
    sender = ' '
    receivers = [' ']


    message = """



              """
    message += "Error Message:\n%s" % msg
    message += "\nYou shall find sample in distored directory"

    try:
    	smtpObj = smtplib.SMTP(' ', '25')
      	smtpObj.sendmail(sender, receivers, message)
     	logging.critical("Error Notification Mail Successfully Sent")
    except smtplib.SMTPException:
     	logging.critical("Error: unable to send error notification email")


def dbconnect():
    """ Returns
    DB connectionn parameters
    """
    conn = None

    try:
        conn = mdb.connect (host = " ",
                            user = " ",
                            passwd = " ",
                            db = "Temp",
                            charset='utf8',
                            use_unicode = True)
        conn.autocommit(True)
        cursor = conn.cursor()
        return cursor

    except mdb.Error, e:
        logging.critical("[-] Error (Module spamConfig.py) - %d: %s" % (e.args[0], e.args[1]))
        senderrornotificationmail(1)
        sys.exit(1)

def dbconnectmain():
    """
    DB connectionn parameters
    """
    conn1 = None

    try:
        conn1 = mdb.connect (host = " ",
                            user = " ",
                            passwd = " ",
                            db = " ",
                            charset='utf8',
                            use_unicode = True)
        conn1.autocommit(True)
        cursor = conn1.cursor()
        return cursor

    except mdb.Error, e:
        logging.critical("[-] Error (Module spamConfig.py) - %d: %s" % (e.args[0], e.args[1]))
        senderrornotificationmail(1)
        sys.exit(1)



def errorhandling(key, msgMailRequest, msg):
    """
    Copies the troublesome spam to different folder and removes it from queue
    """
    logging.critical("\n\t\t\t*[-] Error!!! *")
    logging.critical("Copying spam file to distortedSamples directory before moving it out of queue")
    shutil.copyfile(queuePath + key, devilPath + key)
    senderrornotificationmail(msg)
