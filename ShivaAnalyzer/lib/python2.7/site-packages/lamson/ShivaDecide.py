"""
This module is used to decide whether a spam is new or old. SSDEEP is used to determine the difference.
"""

import logging
import server
import ssdeep
import ShivaAddNewRecord
import ShivaProcessOld


def decide(mailFields, key, exeSql, msgMailRequest):
  logging.info("[+]Inside ShivaDecide module.")
  records = server.QueueReceiver.records

  
  # Checking if we have any item in our global list.
  # If no item: then we will directly push spam details into the list
  # Else: Do the processing.
  
  if not records:
    logging.info("[+]ShivaDecide Module: This is the first spam. Sending directly to ShivaAddNewRecord Module.")
    ShivaAddNewRecord.main(mailFields, key, exeSql, msgMailRequest)# Directly calling the module that will push these entries in our list of dictionaries.
  
  
  else:
    logging.info("[+]ShivaDecide Module: Old spams found in list. Setting threshold.")
    if mailFields['html'][-6:-0] is "SHIVA" or mailFields['html'][-6:-0] is "SHIVA":
      logging.debug("[+]In ShivaDecide: This spam contains magic string.")
      threshold = 90
    elif mailFields['text']:
      threshold = 75			#threshhold is in test stage
    else:
      threshold = 85
      
    logging.info("[+]ShivaDecide Module: Threshold is %d" % threshold)
    
    
    oriLen   = mailFields['len']
    logging.info("[+]ShivaDecide Module: Original length is %d" % oriLen)
    minLen, maxLen = int(oriLen * 0.90), int(oriLen * 1.10)
    #minLen, maxLen = int(oriLen * 0.95), int(oriLen * 1.05)
    
    logging.info("[+]ShivaDecide Module: Min. Len and Max. Len are %d, %d" %(minLen, maxLen))
    
    count = 0
    for record in records: 
      logging.info("Len of record is %d" % record['len'])
      
      if record['len'] >= minLen and record['len'] <= maxLen:
	
	if mailFields['spamMd5'] is record['spamMd5']:
	  logging.info("[+]ShivaDecide Module: MD5 matched with old spam. Not calculating SSDEEP.")
	  ShivaProcessOld.main(mailFields, record['spam_id'], exeSql, key, msgMailRequest)  
	
	else:
	  ratio = ssdeep.compare(mailFields['spam_id'], record['spam_id'])
	  logging.info("[+]ShivaDecide Module: Ratio is %d" % ratio)
	
	  if ratio >= threshold:
	    logging.info("[+]ShivaDecide Module: Old spam found. Sending it to ShivaProcessOld Module.")
	    ShivaProcessOld.main(mailFields, record['spam_id'], exeSql, key, msgMailRequest)  
	    break
	 
      count += 1
     
    if count is len(records):
      logging.info("[+]ShivaDecide Module: No old record found. Sending to ShivaAddNewRecord Module.") 
      ShivaAddNewRecord.main(mailFields, key, exeSql, msgMailRequest) 
      
