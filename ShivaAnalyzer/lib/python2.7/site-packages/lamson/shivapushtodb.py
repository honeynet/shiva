#!/usr/bin/env python


import logging
import datetime
import subprocess
from os import getcwd

import MySQLdb as mdb

import server
import shivaconfig

def push():
    logging.info("[+]Inside shivapushtodb Module")
    exeSql = shivaconfig.dbconnect()
    for record in server.QueueReceiver.records:
        logging.info("Records are %d" % len(server.QueueReceiver.records))

        insertSpam = "INSERT INTO `spam`(`id`, `ssdeep`, `to`, `from`, `textMessage`, `htmlMessage`, `subject`, `headers`, `sourceIP`, `sensorID`, `firstSeen`, `relayCounter`, `totalCounter`, `length`, `relayTime`) VALUES ('" + str(record['spamMd5']) + "', '" + str(record['spam_id']) + "', '" + str(record['to']) + "', '" + str(record['from']) + "', '" + str(record['text']) + "', '" + str(record['html']) + "', '" + str(record['subject']) + "', '" + str(record['headers']) + "', '" + str(record['sourceIP']) + "', '" + str(record['sensorID']) + "', '" + str(record['firstSeen']) + "', '" + str(record['relayed']) + "', '" + str(record['counter']) + "', '" + str(record['len']) + "', '" + str(record['firstRelayed'])  + "')"

        try:
            logging.info("[+]shivapushtodb Module: Trying to push our new record in database")
            exeSql.execute(insertSpam)

        except mdb.Error, e:
            logging.critical("[-] Error (shivapushtodb insert_spam) - %d: %s" % (e.args[0], e.args[1]))
            shivaconfig.errorhandling(key, msgMailRequest, "[-] Error (shivapushtodb - insertSpam) %s %s \n" % (key, e))
            return None

        # Checking for attachments and dumping into directory, if any. Also storing information in database.
        if len(record['attachmentFile']) > 0:
            i = 0
            while i < len(record['attachmentFile']):
                logging.info("[+]shivapushtodb Module: Attachment found. Trying to dump it in local directory.")
                fileName = str(record['spamMd5']) + "-a-" + str(record['attachmentFileName'][i])
                path = '/path/to/dumps/attachments/' + fileName
                attachFile = open(path, 'wb')
                attachFile.write(record['attachmentFile'][i])
                attachFile.close()
                logging.info("[+]shivapushtodb Module: Attachment dumped with name %s" % fileName)
                record['attachmentFile'][i] = path

                insertAttachment = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Attachment' + "', '" + str(record['attachmentFileMd5'][i]) + "', '" + str(record['date']) + "')"

                try:
                    logging.info("Trying to save attachment's info in database.")
                    exeSql.execute(insertAttachment)
                    i += 1

                except mdb.Error, e:
                    logging.critical("[-] Error (shivapushtodb insert_attachment) - %d: %s" % (e.args[0], e.args[1]))
                    shivaconfig.errorhandling(key, msgMailRequest, "[-] Error (shivapushtodb - insertAttachment) %s %s \n" % (key, e))
                    return None

        # Checking for inline attachment files
        if len(record['inlineFile']) > 0:
            i = 0
            while i < len(record['inlineFile']):
                logging.info("[+]shivapushtodb Module: Inline attachment found. Trying to dump it in local directory.")
                fileName = str(record['spamMd5']) + "-i-" + str(record['inlineFileName'][i])
                path = '/path/to/dumps/inlines/' + fileName
                attachFile = open(path, 'wb')
                attachFile.write(record['inlineFile'][i])
                attachFile.close()
                logging.info("[+]shivapushtodb Module: Inline attachment dumped in local directory with file name %s." % fileName)
                insertInline = "INSERT INTO `attachments`(`spam_id`, `file_name`, `attach_type`, `attachmentFileMd5`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(mdb.escape_string(fileName)) + "', '" + 'Inline' + "', '" + str(record['inlineFileMd5'][i]) + "', '" + str(record['date']) + "')"

                try:
                    logging.info("Try to save inline attachment's info in database.")
                    exeSql.execute(insertInline)
                    i += 1
                except mdb.Error, e:
                    logging.critical("[-] Error (shivapushtodb insert_inline) - %d: %s" % (e.args[0], e.args[1]))
                    shivaconfig.errorhandling(key, msgMailRequest, "[-] Error (shivapushtodb - insertInline) %s %s \n" % (key, e))
                    return None

        # Checking for links in spams and storing them
        if len(record['links']) > 0:
            logging.info("[+]shivapushtodb Module: %d URLs found." % len(record['links']))
            i = 0
            for link in record['links']:
                insertLink = "INSERT INTO `links` (`spam_id`, `hyperlink`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(link) + "', '" + str(record['date']) + "')"

                try:
                    logging.info("Trying to save URLs in database.")
                    exeSql.execute(insertLink)
                    i += 1
                except mdb.Error, e:
                    logging.critical("[-] Error (shivapushtodb insert_link) - %d: %s" % (e.args[0], e.args[1]))
                    shivaconfig.errorhandling(key, msgMailRequest, "[-] Error (shivapushtodb - insertLink) %s %s \n" % (key, e))
                    return None


        # Extracting and saving name of the sensor
        insertSensor = "INSERT INTO `sensors` (`spam_id`, `sensorID`, `date`) VALUES ('" + str(record['spamMd5']) + "', '" + str(record['sensorID']) + "', '" + str(record['date']) + "')"

        try:
            logging.info("Trying to push sensorID in database.")
            exeSql.execute(insertSensor)
        except mdb.Error, e:
            logging.critical("[-] Error (shivapushtodb insert_sensor - %d: %s" % (e.args[0], e.args[1]))
            shivaconfig.errorhandling(key, msgMailRequest, "[-] Error (shivapushtodb - insertSensor) %s %s \n" % (key, e))
            return None

    del server.QueueReceiver.records[:]
    server.QueueReceiver.totalRelay = 0
    logging.info("[+]shivapushtodb Module: List and global list counter resetted.")
    

  
def sendfeed():
    logging.info("[+]shivapushtodb Module: Calling sendfeeds module.")
    subprocess.Popen(['python', getcwd() + '/../lib/python2.7/site-packages/lamson/hpfeeds/sendfeeds.py'])
