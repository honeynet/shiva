
"""
This file contains global variables used in various customised files.
Any change needed shall be made here and it would get reflected in customised files

"""
import server
import os, sys, logging
import MySQLdb as mdb
import shutil
import smtplib

dataBaseName = 'Temp'

# PATH for LamsonHoneyMail (receiver) server to dump mails into and for LamsonAnalyser (analyser) to retrieve mails from
queuePath = '/path/to/Shiva/ShivaReceiver/iReceiver/run/queue/new/'

# PATH for those spam samples which could not be handled by spamPot Analyser properly
devilPath = '/path/to/Shiva/ShivaAnalyzer/iAnalyzer/ShivaDistortedSamples/'

# The maximum number of mails to be relayed in xx number of minutes/hours. ShivaScheduler flushes it to value 0 depending on scheduler cycle
relayCounter = 150
# The maximum number of mails to be relayed per combo (from + subject) basis i.e. for one particual spam. ShivaScheduler flushes it to value 0 depending on scheduler cycle
individualRelayCounter = 5


def sendErrorNotificationMail(msg):
  sender = 'Shiva@mugleazam.com'
  receivers = ['rahulbinjve@gmail.com']
  
  
  message = """From: ShivaSpamPot <Shiva@mugleazam.com>
To: RahulB <RahulBinjve@gmail.com>
MIME-Version: 1.0
Content-type: text/html
Subject: Master! Shiva confronted an issue (as usual)!
"""
  message += "Error Message:\n%s" % msg
  message += "\nYou shall find sample in distored directory"
  '''
  try:
    smtpObj = smtplib.SMTP('10.31.31.7', '25')
    smtpObj.sendmail(sender, receivers, message)         
    logging.critical("Error Notification Mail Successfully Sent")
  except smtplib.SMTPException:
    logging.critical("Error: unable to send error notification email")
    '''

def sendRelayNotificationMail():
  sender = 'Shiva@somepartners.com'
  receivers = ['RahulBinjve@gmail.com']
  
  
  message = """From: Shiva <Shiva@somepartners.com>
To: RahulB <RahulBinjve@gmail.com>
MIME-Version: 1.0
Content-type: text/html
Subject: mail aa gayi

<b>A mail has been sent successfully</b>
"""
'''
  try:
    smtpObj = smtplib.SMTP('127.0.0.1', '2500')
    smtpObj.sendmail(sender, receivers, message)         
    logging.critical("Relay Notification Mail Successfully Sent")
  except smtplib.SMTPException:
    logging.critical("Error: unable to send relay notification email")
'''

def dbConnect():
  """
  DB connectionn parameters
  """
  conn = None
  
  try:
    conn = mdb.connect (host = "127.0.0.1",
			user = "root",
			passwd = "password",
			db = "Temp",
			charset='utf8',
			use_unicode = True)
    conn.autocommit(True)						# This is needed for storage engine InnoDB (for foreign keys). It won't save values in tables until commited
    cursor = conn.cursor()
    return cursor
    
  except mdb.Error, e:
    logging.critical("[-] Error (Module spamConfig.py) - %d: %s" % (e.args[0], e.args[1]))
    #sendErrorNotificationMail(1)	# passing any random value to it
    sys.exit(1)
    
def dbConnectMain():
  """
  DB connectionn parameters
  """
  conn1 = None
  
  try:
    conn1 = mdb.connect (host = "127.0.0.1",
			user = "root",
			passwd = "password",
			db = "Shiva",
			charset='utf8',
			use_unicode = True)
    conn1.autocommit(True)						# This is needed for storage engine InnoDB (for foreign keys). It won't save values in tables until commited
    cursor = conn1.cursor()
    return cursor
    
  except mdb.Error, e:
    logging.critical("[-] Error (Module spamConfig.py) - %d: %s" % (e.args[0], e.args[1]))
    sendErrorNotificationMail(1)	# passing any random value to it
    sys.exit(1)
    


def errorHandling(key, msgMailRequest, msg):
  """
  Copies the troublesome spam to different folder and removes it from queue
  """
  logging.critical("\n\t\t\t************************* [-] Error!!! *************************")
  logging.critical("Copying spam file to distortedSamples directory before moving it out of queue")
  shutil.copyfile(queuePath + key, devilPath + key)
  sendErrorNotificationMail(msg)
